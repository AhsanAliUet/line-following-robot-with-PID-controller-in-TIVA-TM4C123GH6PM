void SystemInit(){};
//#include "linefollowingPID.c"
	//***************     System Clock Enable      ************************* //
#define SYSCTL_RCGCGPIO_R 	(*((volatile unsigned long*) 0x400FE608)) 

  //********* PORT A Initializations. Base Address is 0x40025000 **********//
#define GPIO_PORTA_DATA_R		(*((volatile unsigned long*) 0x400043FC))
#define GPIO_PORTA_DIR_R		(*((volatile unsigned long*) 0x40004400))
#define GPIO_PORTA_DEN_R		(*((volatile unsigned long*) 0x4000451C))
#define GPIO_PORTA_PDR_R		(*((volatile unsigned long*) 0x40004514))
#define GPIO_PORTA_PUR_R		(*((volatile unsigned long*) 0x40004510))
	
	//********* PORT B Initializations. Base Address is 0x40005000 **********//
#define GPIO_PORTB_DATA_R		(*((volatile unsigned long*) 0x400053FC))
#define GPIO_PORTB_DIR_R		(*((volatile unsigned long*) 0x40005400))
#define GPIO_PORTB_DEN_R		(*((volatile unsigned long*) 0x4000551C))
#define GPIO_PORTB_PDR_R		(*((volatile unsigned long*) 0x40005514))
#define GPIO_PORTB_PUR_R		(*((volatile unsigned long*) 0x40005510))
	
//********* Defining all Macros ***********//
#define CLK_PORTA 		0x01          // clock enable for port A
#define CLK_PORTB		  0x02          // clock enable for port B

#define PA2           0x04
#define PA3           0x08
#define PA4           0x10
#define PA5           0x20
#define PA6           0x40
#define PA7           0x80

#define PB0						0x01          //IN1
#define PB1	          0x02          //IN2
#define PB2						0x04          //IN3
#define PB3						0x08          //IN4
#define PB4           0x10
#define PB5           0x20
#define PB6           0x40

void Delay_ms(int time_ms);
//Timers Configurations start here

// Timer 1 base address
# define TM_BASE 0x40031000
// Peripheral clock enabling for timer and GPIO
# define RCGC_TIMER_R *( volatile unsigned long *)0x400FE604
# define RCGC2_GPIO_R *( volatile unsigned long *)0x400FE108
# define CLOCK_GPIOF 0x00000020 // Port F clock control
# define SYS_CLOCK_FREQUENCY 16000000
// General purpose timer register definitions
# define GPTM_CONFIG_R *( volatile long *)( TM_BASE + 0x000 )
# define GPTM_TA_MODE_R *( volatile long *)( TM_BASE + 0x004 )
# define GPTM_CONTROL_R *( volatile long *)( TM_BASE + 0x00C )
# define GPTM_INT_MASK_R *( volatile long *)( TM_BASE + 0x018 )
# define GPTM_INT_CLEAR_R *( volatile long *)( TM_BASE + 0x024 )
# define GPTM_TA_IL_R *( volatile long *)( TM_BASE + 0x028 )
# define GPTM_TA_MATCH_R *( volatile long *)( TM_BASE + 0x030 )
// GPIO PF2 alternate function configuration
# define GPIO_PORTF_AFSEL_R *(( volatile unsigned long *)0x40025420 )
# define GPIO_PORTF_PCTL_R *(( volatile unsigned long *)0x4002552C )
# define GPIO_PORTF_DEN_R *(( volatile unsigned long *)0x4002551C )
// Timer config and mode bit field definitions
# define TIM_16_BIT_CONFIG 0x00000004 // 16- bit timer
# define TIM_PERIODIC_MODE 0x00000002 // Periodic timer mode
# define TIM_A_ENABLE 0x00000001 // Timer A enable control
# define TIM_PWM_MODE 0x0000000A // Timer in PWM mode
# define TIM_CAPTURE_MODE 0x00000004 // Timer capture mode
// Timer1 A reload value for 1 kHz PWM frequency
# define TIM_A_INTERVAL 16000 // Timer reload value for
// 1 kHz PWM frequency at
// clock frequency of 16 MHz
// 16 ,000 ,000/16000
// = 1 kHz
#define TIM_A_MATCH 							 16000 // Timer match value for 75%     //PF2, right motor, 6400 = 60%, 9600 = 40%, 10400 = 35%

// duty cycle
// Timer and GPIO intialization and configuration
void Timer1A_Init ( void )
{
// Enable the clock for port F and Timer1
RCGC2_GPIO_R |= CLOCK_GPIOF ;
RCGC_TIMER_R |= 0x02 ;
// Configure PortF pin 2 as Timer1 A output
GPIO_PORTF_AFSEL_R |= 0x00000004 ;
GPIO_PORTF_PCTL_R |= 0x00000700 ; // Configure as timer CCP pin
GPIO_PORTF_DEN_R |= 0x00000004 ;
// Enable the clock for Timer 1
GPTM_CONTROL_R &= ~( TIM_A_ENABLE ); // disable timer 1 A
// Timer1 A configured as 16- bit timer
GPTM_CONFIG_R |= TIM_16_BIT_CONFIG ;
// Timer1 A in periodic timer , edge count and PWM mode
GPTM_TA_MODE_R |= TIM_PWM_MODE ;
GPTM_TA_MODE_R &= ~( TIM_CAPTURE_MODE );
// Make PWM frequency 1 kHz using reload value of 1600010.11. SUMMARY OF KEY CONCEPTS 345
GPTM_TA_IL_R = TIM_A_INTERVAL ;
// Configure PWM duty cycle value ( should be less than 16000)
//GPTM_TA_MATCH_R = 11200 ;
// Enable timer1 A
GPTM_CONTROL_R |= TIM_A_ENABLE ;
}

//Timer A ends here
//Timer B starts here

//PWM on PF3

// Timer 1 base address
#define TM_BASE 0x40031000
// Peripheral clock enabling for timer and GPIO
#define RCGC_TIMER_R                *( volatile unsigned long *)0x400FE604
#define RCGC2_GPIO_R                *( volatile unsigned long *)0x400FE108
#define CLOCK_GPIOF                 0x00000020 // Port F #define SYS_CLOCK_FREQUENCY         16000000
// General purpose timer register definitions
#define GPTM_CONFIG_R                *( volatile long *)( TM_BASE + 0x000 )
#define GPTM_TB_MODE_R               *( volatile long *)( TM_BASE + 0x008 )
#define GPTM_CONTROL_R               *( volatile long *)( TM_BASE + 0x00C )
#define GPTM_INT_MASK_R              *( volatile long *)( TM_BASE + 0x018 )
#define GPTM_INT_CLEAR_R             *( volatile long *)( TM_BASE + 0x024 )
#define GPTM_TB_IL_R                 *( volatile long *)( TM_BASE + 0x02C )
#define GPTM_TB_MATCH_R              *( volatile long *)( TM_BASE + 0x034 )


// GPIO PF2 alternate function configuration
#define GPIO_PORTF_AFSEL_R *(( volatile unsigned long *)0x40025420 )
#define GPIO_PORTF_PCTL_R  *(( volatile unsigned long *)0x4002552C )
#define GPIO_PORTF_DEN_R   *(( volatile unsigned long *)0x4002551C )

// Timer config and mode bit field definitions
#define TIM_16_BIT_CONFIG          0x00000004   
#define TIM_PERIODIC_MODE          0x00000002   
#define TIM_B_ENABLE               0x00000100
#define TIM_PWM_MODE               0x0000000A  
#define TIM_CAPTURE_MODE           0x00000004  

// Timer1 A reload value for 1 kHz PWM frequency
#define TIM_B_INTERVAL             16000         
#define TIM_B_MATCH                16000   //PF3, left motor                                  8000 = 50%, 11200 = 30%                        

// Timer and GPIO intialization and configuration
void Timer1B_Init ( void )
{
    // Enable the clock for port F and Timer1
    RCGC2_GPIO_R |= CLOCK_GPIOF ;
    RCGC_TIMER_R |= 0x02 ;
    // Configure PortF pin 2 as Timer1 A output
    GPIO_PORTF_AFSEL_R |= 0x00000008 ;
    GPIO_PORTF_PCTL_R |= 0x00007000 ;                
	  GPIO_PORTF_DEN_R |= 0x00000008 ;
	    // Enable the clock for Timer 1
    GPTM_CONTROL_R &= ~( TIM_B_ENABLE );         // disable timer 1 A
    // Timer1 A configured as 16- bit timer
    GPTM_CONFIG_R |= TIM_16_BIT_CONFIG ;
    // Timer1 A in periodic timer , edge count and PWM mode
    GPTM_TB_MODE_R |= TIM_PWM_MODE ;
    GPTM_TB_MODE_R &= ~( TIM_CAPTURE_MODE );
    // Make PWM frequency 1 kHz using reload value of 16000
    GPTM_TB_IL_R = TIM_B_INTERVAL ;
    // Configure PWM duty cycle value ( should be less than 
    //GPTM_TB_MATCH_R = TIM_B_MATCH ;
     // Enable timer1 A
     GPTM_CONTROL_R |= TIM_B_ENABLE ;
}




//************   Delay Function ************//
void Delay(long value)
{
	int l;
	for(l = 0; l<value; l++);
}

//************ Variables to store the output of sensors ************//


//************ main function **************//

int dutyCycle(double duty);

int motorLeftDuty, motorRightDuty;

int main (void)
{
			//PID data starts here
	int error = 0; int previous_error = 0; int ref = 150; int current_position = 150;
	float d_error; float i_error = 0;
	float pid, Kp, Kd, Ki, baseSpeed = 100;
	
	int sen1;
	int sen2;
	int sen3;
	int sen4;
	int sen5;
	int sen6;
	
	int left = 0x04; //10 //to move left tyre forward
	int right = 0x10;
	//int forward = 0x50;
	int stop = 0x00;
	volatile unsigned delay_clk;

		int dutyLeft  = 10400;    //Timer A PF2
		int dutyRight = 11200;    //Timer B PF3
		Timer1A_Init (); // Initialize the timer
		Timer1B_Init();	
		//while (1) {

		//		GPTM_TA_MATCH_R = dutyLeft;
		//		GPTM_TB_MATCH_R = dutyRight;
		//}
			

	
	
	SYSCTL_RCGCGPIO_R |= (CLK_PORTA + CLK_PORTB);  
	delay_clk 		    = SYSCTL_RCGCGPIO_R; //dummy delay to pass 3 cycles

	GPIO_PORTA_DEN_R  |= (PA2 + PA3 + PA4 + PA5 + PA6);
	GPIO_PORTA_DIR_R 	|= (PA2 + PA3 + PA4 + PA5 + PA6);	
	//GPIO_PORTA_PUR_R  |= (PA2 + PA3 + PA4 + PA5 + PA6);
	
	GPIO_PORTB_DEN_R 	|= (PB0 + PB1 + PB2 + PB3 + PB4);
	//GPIO_PORTB_DIR_R 	|= (PB0 + PB1 + PB2 + PB3 + PB4);
	GPIO_PORTB_DIR_R 	&= ~(PB0 + PB1 + PB2 + PB3 + PB4);	
	GPIO_PORTB_PUR_R  |= (PB0 + PB1 + PB2 + PB3 + PB4);

	//Initial delay
	//Delay(80000000);
	
	

	GPTM_TA_MATCH_R = dutyCycle(0);
	GPTM_TB_MATCH_R = dutyCycle(0);
	while(1)
		{
			
			
		sen1 = GPIO_PORTB_DATA_R & PB0;   // stores Input of PA2
		sen2 = GPIO_PORTB_DATA_R & PB1;   // stores Input of PA3
		sen3 = GPIO_PORTB_DATA_R & PB2;   // stores Input of PA4
		sen4 = GPIO_PORTB_DATA_R & PB3;   // stores Input of PA5
		sen5 = GPIO_PORTB_DATA_R & PB4;   // stores Input of PA6			
		sen6 = GPIO_PORTB_DATA_R & PB5;   // stores Input of PA7   //obstacle sensor
	
	//Remember: not (!) sign represents black is detected
	
		if (!sen1 && !sen2 && sen3 && !sen4 && !sen5)
		{
				GPIO_PORTA_DATA_R = left + right;
				
			current_position = 150;
				
		}
		
		else if (sen1 && sen2 && !sen3 && sen4 && sen5)
		{
				GPIO_PORTA_DATA_R = left + right;
		}
		else if (sen1 && !sen2 && !sen3 && !sen4 && sen5)
		{
				GPIO_PORTA_DATA_R = left + right;
			current_position = 150;
		}
		
		else if (sen1 && sen2 && sen3 && !sen4 && !sen5)
		{
				GPIO_PORTA_DATA_R = right; //turning on left tyre to move right
			current_position = 90;
		}
		
		else if (!sen1 && !sen2 && sen3 && sen4 && sen5)
		{
				GPIO_PORTA_DATA_R = left; //turning on right tyre to move left
			current_position = 90;
		}
		
		else if (!sen1 && !sen2 && sen3 && sen4 && sen5) //left most two sensors
		{
				GPIO_PORTA_DATA_R = right; //turn left by moving right tyre
			current_position = 110;
		}
		
		else if (sen1 && sen2 && sen3 && !sen4 && !sen5) //right most two sensors
		{
				GPIO_PORTA_DATA_R = left; //turn right by moving left tyre
			current_position = 110;
		}		
		
		else if (!sen1 && sen2 && sen3 && sen4 && sen5) //left most sensor only
		{
				GPIO_PORTA_DATA_R = left; //turn left by moving right tyre
			current_position = 130;
		}
		else if (sen1 && sen2 && sen3 && sen4 && !sen5) //right most sensor only
		{
				GPIO_PORTA_DATA_R = right; //turn right by moving left tyre
			current_position = 130;
		}
	
		
		else if (sen1 && !sen2 && sen3 && sen4 && sen5) //S2
		{
				GPIO_PORTA_DATA_R = left; //turn left by moving right tyre
			current_position = 110;
		}
		
		else if (sen1 && sen2 && sen3 && !sen4 && sen5) //S4
		{
				GPIO_PORTA_DATA_R = right; //turn right by moving left tyre
			current_position = 110;
		}
		
		else if (!sen1 && !sen2 && !sen3 && !sen4 && !sen5)
		{
				GPIO_PORTA_DATA_R = stop;
		}
		else if (sen1 && sen2 && sen3 && sen4 && sen5)
		{
				GPIO_PORTA_DATA_R = left + right;
		}
		/*
		else if (sen6 == 0)
		{
				//GPTM_TA_MATCH_R = dutyCycle(0);
				//GPTM_TB_MATCH_R = dutyCycle(0);
				GPIO_PORTA_DATA_R = stop;
		}
		*/
		
		
		
		//PID coding starts here
		error = ref - current_position;
		d_error = error - previous_error;
		i_error = i_error + error;
		
		pid = Kp + d_error * Kd + i_error * Ki;
		
		motorLeftDuty = baseSpeed + pid;
		motorRightDuty = baseSpeed - pid;
	
		}
	}
	

void Delay_ms(int time_ms)
{
    int i, j;
    for(i = 0 ; i < time_ms; i++)
        for(j = 0; j < 3180; j++)
            {}  /* excute NOP for 1ms */
}

int dutyCycle(double duty)
{
		return ((100-duty)/100) * 16000;
}

void dutyLeftMotor()
{
		GPTM_TB_MATCH_R = motorRightDuty;
}

void dutyRightMotor()
{
		GPTM_TA_MATCH_R = motorLeftDuty;
}

